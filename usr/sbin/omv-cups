#!/usr/bin/env python
#
# Copyright (C)      2011 Ian Moore
# Copyright (C) 2013-2015 OpenMediaVault Plugin Developers
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file. If not, see <http://www.gnu.org/licenses/>.

# pycups: http://packages.python.org/pycups

import cups
import json
import locale
import os
import pprint
import re
import sys
from lxml import etree


def camelCase(d):
    """
    Convert dash-style-props to CamelCaseStyleProps.
    """

    nd = {}
    for k, v in d.items():
        nd[''.join([w.capitalize() for w in k.split('-')])] = v

    return nd


def omvGetAdminPassword(prompt=''):
    """
    Get password for admin.
    """

    # Parse configuration file to get user / pass.
    doc = etree.parse('/etc/openmediavault/config.xml')
    xpath = "//system/usermanagement/users/user[name='admin']/password"
    adminPassword = doc.xpath(xpath)

    if len(adminPassword) == 0:
        print "Error finding admin user."
        sys.exit(1)

    return adminPassword[0].text


class OMVCups(object):

    """
    OpenMediaVault CUPS class.
    """

    port = 631
    host = '127.0.0.1'

    def __init__(self):
        cups.setUser('admin')
        cups.setPasswordCB(omvGetAdminPassword)

        self.conn = cups.Connection()

    def enableSharing(self):
        """ Enable printer sharing on server. """

        self.conn.adminSetServerSettings({
            cups.CUPS_SERVER_SHARE_PRINTERS: '1'})

    def getJobs(self, args):
        """ Get job list. """

        [which] = args
        jobs = []

        for j in self.conn.getJobs(which, False, -1, -1).keys():
            jobs.append(camelCase(self.conn.getJobAttributes(j, [
                'job-id',
                'job-k-octets',
                'job-name',
                'job-originating-host-name',
                'job-originating-user-name',
                'job-state',
                'job-state-reasons',
                'time-at-creation',
                'time-at-completed',
                'printer-uri',
                'job-media-sheets-completed'])))

        print json.dumps(jobs)

    def setPrinter(self, args):
        """
        Set printer description and location.
        """

        [name, info, location] = args

        self.conn.setPrinterInfo(name, info)
        self.conn.setPrinterLocation(name, location)

        # Always enable and share printer.
        self.conn.setPrinterShared(name, True)
        self.conn.enablePrinter(name)

    def getPrinter(self, args):
        """
        Return a single printer.
        """

        [name] = args

        print json.dumps(dict(camelCase(self.conn.getPrinters()[name])
                              .items() + {'uuid': name}.items()))

    def printTestPage(self, args):
        """
        Send test page to named printer.
        """

        [name] = args

        self.conn.printTestPage(name)

    def cancelAllJobs(self, args):
        """
        Cancel all jobs on named printer.
        """

        [name] = args

        self.conn.cancelAllJobs(name, my_jobs=False, purge_jobs=False)

    def cancelJob(self, args):
        """
        Cancel a single job.
        """

        [jobid] = args

        self.conn.cancelJob(int(jobid))

    def addPrinter(self, args):
        """
        Add printer to CUPS.
        """

        [name, fppdname, finfo, flocation, fdevice] = args

        self.conn.addPrinter(name=name,
                             ppdname=fppdname,
                             info=finfo,
                             location=flocation,
                             device=fdevice)

        # All good defaults.
        self.conn.enablePrinter(name)
        self.conn.acceptJobs(name)
        self.conn.setPrinterShared(name, True)

    def deletePrinter(self, args):
        """
        Delete printer.
        """

        [name] = args

        self.conn.deletePrinter(name)

    def getMakesModels(self):
        """
        Return a list of makes and models supported by this CUPS installation.
        """

        mms = {}
        returnList = []

        for k, v in self.conn.getPPDs().items():

            if mms.get(v['ppd-make'], None) is None:
                mms[v['ppd-make']] = []

            v = camelCase(v)
            v['uuid'] = k

            mms[v['PpdMake']].append(v)

        for k, v in mms.items():
            v.sort(lambda a, b: cups.modelSort(a['PpdMakeAndModel'],
                                               b['PpdMakeAndModel']))
            returnList.append({
                'make': k,
                'models': v
            })

        returnList.sort(lambda a, b: cups.modelSort(a['make'], b['make']))

        print json.dumps(returnList)

    def pausePrinter(self, args):
        """
        Pause printing on printer.
        """

        self.conn.disablePrinter(args[0])

    def resumePrinting(self, args):
        """
        Resume printing on printer.
        """

        self.conn.enablePrinter(args[0])

    def pausePrinting(self, args):
        """
        Pause printing on printer.
        """

        self.conn.disablePrinter(args[0])

    def getPPDs(self):
        """
        Get all PPDs.
        """

        pprint.pprint(self.conn.getPPDs())

    def findDirectPrinters(self, args):
        """
        Find directly attached printers.
        """

        devList = []

        if args[0] == '--no-network':
            devs = self.conn.getDevices(include_schemes=['usb',
                                                         'parallel',
                                                         'serial',
                                                         'hp',
                                                         'hpfax'])
        else:
            devs = self.conn.getDevices(include_schemes=['usb',
                                                         'parallel',
                                                         'serial',
                                                         'hp',
                                                         'hpfax',
                                                         'dnssd',
                                                         'snmp'])

        for k, p in devs.items():
            # Skip conceptual printers.
            if args[0] == '--no-network':
                if k.find(':') < 0 or p['device-class'] != 'direct':
                    continue

            p = camelCase(p)
            p['uuid'] = k
            devList.append(p)

        print json.dumps(devList)

    def getPrinters(self):
        """
        Get a list of configured printers.
        """

        printers = self.conn.getPrinters()

        printerList = []
        for k, p in printers.items():
            p['attrs'] = self.conn.getPrinterAttributes(name=k)
            p = camelCase(p)
            p['uuid'] = k
            printerList.append(p)

        print json.dumps(printerList)

    def getPPD(self, args):
        """
        Return PPD of printer.
        """

        pprint.pprint(self.conn.getPPD(args[0]))

    def getPrinterAttributes(self, args):
        """
        Get attributes.
        """

        pprint.pprint(self.conn.getPrinterAttributes(uri=args[0]))

if __name__ == '__main__':
    locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
    apg = OMVCups()

    try:
        if len(sys.argv[2:]):
            getattr(apg, sys.argv[1])(sys.argv[2:])
        else:
            getattr(apg, sys.argv[1])()

    except cups.HTTPError, e:
        print json.dumps({'error': 'CUPS HTTP error status code: %s' % e.args})

    except cups.IPPError, e:
        print json.dumps({'error': 'CUPS IPP error(%s): %s' % e.args})
